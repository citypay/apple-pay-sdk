//
//  CityPayKit
//
//  Created by Gary Feltham on 26/08/2015.
//  Copyright (c) 2015 CityPay Limited. All rights reserved.
//

import UIKit
import PassKit

struct CityPayConstants {
    static let url = NSURL(string: "https://secure.citypay.com/applepay/v1")
}

enum CityPayPolicy: Int {
    case Default = 0
    case Enforce
    case Bypass
}

public class CityPayRequest: NSObject {

    let merchantId: Int
    let licenceKey: String
    let identifier: String
    let test: Bool
    
    //  
    //  SDK and application version strings
    //
    let appVersion: String = CityPayRequest.getVersionFromMainBundle()
    let sdkVersion: String = CityPayRequest.getVersionFromClassBundle(forClass: CityPayRequest.self)
    
    //
    //  Transaction data
    //
    var transactionData: String? = nil
    
    //
    //  Cardholder account number
    //
    var accountNo: String? = nil
    
    var avsAddressPolicy: CityPayPolicy = CityPayPolicy.Default
    var avsPostcodePolicy: CityPayPolicy = CityPayPolicy.Default
    
    /**

        Get the version string for the relevant bundle.

     */
    private static func getVersionFromBundle(bundle: NSBundle) -> String {
        var infoDic: [String: AnyObject]? = bundle.infoDictionary
        if (infoDic != nil) {
            return (infoDic!["CFBundleShortVersionString"] as? String ?? "<Unknown>")
                + " ("
                + (infoDic!["CFBundleVersion"] as? String ?? "<Unknown>")
                + ")"
        } else {
            return "<Unknown> (<Unknown>)"
        }
    }
    
    /**

        Get the bundle object most closely associated with the specified
        class.

     */
    private static func getVersionFromClassBundle(forClass aClass: AnyClass) -> String {
        return getVersionFromBundle(
            NSBundle(forClass: aClass)
        )
    }
    
    /**
    
        Get the bundle object associated with the current executable.

     */
    private static func getVersionFromMainBundle() -> String {
        return getVersionFromBundle(
            NSBundle.mainBundle()
        )
    }
    
    /**

        Default class initializer.
    
     */
    public init(
        merchantId: Int,
        licenceKey: String,
        identifier: String,
        test: Bool
    ) {
        assert(merchantId > 0, "Merchant ID is not valid")
        assert(licenceKey != "", "Licence Key is not provided")
        assert(identifier != "", "Identifier is not provided")
        assert(identifier.characters.count >= 5, "Identifier must be between 5 and 50 characters")
        assert(identifier.characters.count < 50, "Identifier must be between 5 and 50 characters")
        self.merchantId = merchantId
        self.licenceKey = licenceKey
        self.identifier = identifier
        self.test = test
        NSLog(self.sdkVersion)
    }
    
    /**
    
        Update the account number to be associated with the relevant
        payment transaction for the purpose of enabling continuous
        authority.

     */
    public func accountNo(accountNo: String) -> CityPayRequest
    {
        self.accountNo = accountNo;
        return self
    }
    
    /**

        Update the transaction information string associated with a
        particular payment transaction.

     */
    public func transactionData(transactionData: String) -> CityPayRequest
    {
        self.transactionData = transactionData
        return self
    }
    
    
    func cpJson() -> NSDictionary {
        return [
            "merchantId": merchantId,
            "licenceKey": licenceKey,
            "accountNo": (accountNo ?? ""),
            "identifier": identifier,
            "transactionData": (transactionData ?? ""),
            "test": test,
            "appVersion": appVersion,
            "sdkVersion": sdkVersion,
            "deviceVersion": NSProcessInfo().operatingSystemVersionString
        ]
    }
    
    // used for testing
    @objc public func toJson() -> NSData? {
        return try? NSJSONSerialization.dataWithJSONObject(cpJson(), options: NSJSONWritingOptions())
    }
    
    /**
     
    Callback function used to process the response generated by the
    HTTPS request issued to the CityPay ApplePay endpoint.

     */
    private func processCityPayRequestResponse(
        data: NSData?,
        response: NSURLResponse?,
        error: NSError?,
        completion: (PKPaymentAuthorizationStatus) -> Void,
        paymentResponse: (CityPayResponse) -> Void
    ) -> Void {
        if let http = response as? NSHTTPURLResponse {
            //
            //  response received?
            //
            NSLog("Response: \(http.statusCode)")
            
            //
            //  Decode the response
            //
            let resp = CityPayResponse(data: data!)
            
            //
            //  Check the result of the SHA-256 digest
            //
            if (resp.isValid(self.licenceKey)) {
                //
                //  Send a success or failure authorization status to the
                //  completion handler notified to the referring function
                //  to enable the UI to display an appropriate completion
                //  message.
                //
                if (resp.authorised) {
                    NSLog("Successful payment: \(resp.log())")
                    completion(PKPaymentAuthorizationStatus.Success)
                } else {
                    NSLog("Failed payment: \(resp.log())")
                    completion(PKPaymentAuthorizationStatus.Failure)
                }
                
                //
                //  Send the CityPayResponse object derived from the HTTPS
                //  request response to the payment response handler notified
                //  to the referring function to enable further processing
                //  by the merchant application.
                //
                NSLog("Calling payment response")
                paymentResponse(resp)
            } else {
                //
                //  Send a failure authorization status to the completion
                //  handler notified to the referring function to enable the
                //  UI to display an appropriate completion message.
                //
                let rejectedAuth = resp.rejectAuth(self.licenceKey, errormsg: "Digest mismatch")
                NSLog("Failed payment: \(rejectedAuth.log())")
                completion(PKPaymentAuthorizationStatus.Failure)
                
                //
                //  Send the CityPayResponse object derived from the HTTPS
                //  request response to the payment response handler notified
                //  to the referring function to enable further processing
                //  by the merchant application.
                //
                NSLog("Calling payment response")
                paymentResponse(rejectedAuth)
            }
            
        } else {
            NSLog("Response not NSHTTPURLResponse: \(error)")
            completion(PKPaymentAuthorizationStatus.Failure)
        }
    }
    
    /**
     
     The applePay function supports the processing of ApplePay transactions
     with applications that implement in-application payment processing.
     
     - parameters
     
       - controller:
         an instance of PKPaymentAuthorizationViewController, responsible
         for the UI associated with payment authorization and processing.
     
       - payment:
         a PKPayment object containing the user- and ApplePay server-
         authorized payment request.
     
       - completion:
         an authorization status signal callback function for transmission of
         a PKPaymentAuthorizationStatus value to the destination notified.
     
       - paymentResponse
         a CityPayResponse signal callback function for transmission of
         the CityPayResponse object received on attempted processing of the
         transaction to the destination notified.
     
     */
    public func applePay(
        controller: PKPaymentAuthorizationViewController,
        payment: PKPayment,
        completion: (PKPaymentAuthorizationStatus) -> Void,
        paymentResponse: (CityPayResponse) -> Void
    ) {
    
        NSLog("ApplePay payment started")
        
        //
        //  Marshall data provided by the PKPaymentAuthorizationViewController to the
        //  PKPaymentAuthorizationViewControllerDelegate into an associative array
        //  ("obj") ready from JSON serialization, and submission to the CityPay
        //  gateway endpoint.
        //
        
        var obj = [
            "payment": payment.token.paymentData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions()),
            "transactionIdentifier": payment.token.transactionIdentifier,
            "gateway": cpJson()]
        
        let os = NSProcessInfo().operatingSystemVersion
        switch (os.majorVersion, os.minorVersion, os.patchVersion) {
        case (8, _, _):
            obj["billing"] = "" // TODO addition of billing data from ABRecord
        default:
            NSLog("Using PKContact")
            let billdata = [
                "title": payment.billingContact?.name?.namePrefix ?? "",
                "lastname": payment.billingContact?.name?.familyName ?? "",
                "firstname": payment.billingContact?.name?.givenName ?? "",
                "email": payment.billingContact?.emailAddress ?? "",
                "address1": payment.billingContact?.postalAddress?.street ?? "",
                "address2": payment.billingContact?.postalAddress?.city ?? "",
                "area": payment.billingContact?.postalAddress?.state ?? "",
                "postcode": payment.billingContact?.postalAddress?.postalCode ?? "",
                "country": payment.billingContact?.postalAddress?.ISOCountryCode ?? ""
            ]
            
            obj["billing"] = billdata
        }
        
        if (avsAddressPolicy != CityPayPolicy.Default || avsPostcodePolicy != CityPayPolicy.Default) {
            obj["options"] = [
                "avsAddressPolicy": String(avsAddressPolicy.rawValue),
                "avsPostcodePolicy": String(avsPostcodePolicy.rawValue)
            ]
        }
        
        //
        //  Submit the Apple Pay authorized transaction to the payment
        //  gateway -
        //
        //      (1) attempt serialization of the associative array, obj;
        //
        //      (2) prepare the HTTPS request;
        //
        //      (3) attempt the HTTPS request, and direct the response
        //          to the processCityPayRequestResponse function.
        //
        
        NSLog("Serializing JSON")
        if let json: NSData = try? NSJSONSerialization.dataWithJSONObject(obj, options: NSJSONWritingOptions()) {
            
            let request = NSMutableURLRequest()
            request.URL = CityPayConstants.url
            request.HTTPMethod = "POST"
            request.HTTPBody = json
            request.addValue("application/json", forHTTPHeaderField: "Content-Type")
            request.addValue("application/json", forHTTPHeaderField: "Accept")
            
            NSLog("Sending call to \(CityPayConstants.url)")
            let task: NSURLSessionDataTask
                = NSURLSession
                    .sharedSession()
                    .dataTaskWithRequest(
                        request,
                        completionHandler: {
                            (data: NSData?, response: NSURLResponse?, error: NSError?) -> Void in
                                self.processCityPayRequestResponse(
                                    data,
                                    response: response,
                                    error: error,
                                    completion: completion,
                                    paymentResponse: paymentResponse
                            )
                        }
                    )
            
            task.resume()
        } else {
            assert(false, "JSON creation failure")
        }
    }

}
